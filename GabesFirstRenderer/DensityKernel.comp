#version 430 core
layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(std430, binding = 0) buffer input_layout
{
    uint SpatialOffsets[];
    vec2 PredictedPositions[];
	uvec4 SpatialIndices[];
};
layout(std430, binding = 1) buffer output_layout
{
	float OutDensities[]; // Regular densities
    float OutNearDensities[]; // Near densities
};

uniform float smoothingRadius;
uniform uint numParticles;
uniform float SpikyPow2ScalingFactor;
uniform float SpikyPow3ScalingFactor;

// Function to calculate aligned size (similar to CPU-side calculation)
uint getAlignedSize(uint elementSize, uint alignment, uint count) {
    return (elementSize * count + alignment - 1u) & ~(alignment - 1u);
}

// In main:
// First calculate aligned size of SpatialOffsets (uint array, 4-byte align)
uint offsetsAlignedSize = getAlignedSize(4u, 8u, numParticles);
// This gives us positionsOffset in vec2s (8 bytes each)
uint positionsOffset = offsetsAlignedSize / 8u;

// Now for indices, we need both previous aligned sizes
uint positionsAlignedSize = getAlignedSize(8u, 16u, numParticles);
// Calculate indicesOffset in uvec4s (each uvec4 is 16 bytes)
uint indicesOffset = (offsetsAlignedSize + positionsAlignedSize) / 16u;

const vec2 offsets2D[9] =
{
	vec2(-1, 1),
	vec2(0, 1),
	vec2(1, 1),
	vec2(-1, 0),
	vec2(0, 0),
	vec2(1, 0),
	vec2(-1, -1),
	vec2(0, -1),
	vec2(1, -1),
};

// Constants used for hashing
const uint hashK1 = 15823;   // Large prime
const uint hashK2 = 9737333;   // Large prime

// Convert floating point position into an integer cell coordinate
vec2 GetCell2D(vec2 position, float radius)
{
	return floor(position / radius);
}

// Hash cell coordinate to a single unsigned integer
uint HashCell2D(vec2 cell)
{
	uint a = uint(cell.x) * hashK1;
	uint b = uint(cell.y) * hashK2;
	return (a + b);   
}

uint KeyFromHash(uint hash, uint tableSize)
{
    return hash % tableSize;
}

float DensityKernel(float dst, float radius)
{
	if (dst < radius)
	{
		float v = radius - dst;
		return v * v * SpikyPow2ScalingFactor;
	}
	return 0;
}

float NearDensityKernel(float dst, float radius)
{
	if (dst < radius)
	{
		float v = radius - dst;
		return v * v * v * SpikyPow3ScalingFactor;
	}
	return 0;
}

vec2 CalculateDensity(vec2 pos)
{
	vec2 originCell = GetCell2D(pos, smoothingRadius);
	float sqrRadius = smoothingRadius * smoothingRadius;
	float density = 0;
	float nearDensity = 0;

	// Neighbour search
	for (int i = 0; i < 9; i++)
	{
		//density += 0.1;  
		uint hash = HashCell2D(originCell + offsets2D[i]);
		uint key = KeyFromHash(hash, numParticles);
		uint currIndex = SpatialOffsets[key];

		while (currIndex < numParticles)
		{
			//density += 0.1;  
			uvec3 indexData = SpatialIndices[indicesOffset - 1 + currIndex].xyz;
			currIndex++;
			// Exit if no longer looking at correct bin
			if (indexData.z != key) break;
			// Skip if hash does not match
			if (indexData.y != hash) continue;

			uint neighbourIndex = indexData.x;
			vec2 neighbourPos = PredictedPositions[positionsOffset - 1 + neighbourIndex];
			vec2 offsetToNeighbour = neighbourPos - pos;
			float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

			// Skip if not within radius
			if (sqrDstToNeighbour > sqrRadius) continue;

			// Calculate density and near density
			float dst = sqrt(sqrDstToNeighbour);
			density += DensityKernel(dst, smoothingRadius);
			nearDensity += NearDensityKernel(dst, smoothingRadius);
		}
	}

	return vec2(density, nearDensity);
}

void main() {
	

    vec2 density = CalculateDensity(PredictedPositions[positionsOffset - 1 + gl_GlobalInvocationID.x]);
	//OutPos[gl_GlobalInvocationID.x] = PredictedPositions[gl_GlobalInvocationID.x];
    OutDensities[gl_GlobalInvocationID.x] = density.x;
	OutNearDensities[gl_GlobalInvocationID.x + numParticles - 1] = density.y;
}