#version 430 core
layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(std430, binding = 0) buffer input_layout
{
    float InDensities[];
    layout(offset = 20000) uint SpatialOffsets[];  // Explicit offset
    layout(offset = 40000) uvec4 SpatialIndices[];
    layout(offset = 120000) vec2 PredictedPositions[];
};
layout(std430, binding = 1) buffer output_layout
{
	vec2 OutDensities[];
	//float OutNearDensities[];
};

uniform float smoothingRadius;
uniform uint numParticles;
uniform float SpikyPow2ScalingFactor;
uniform float SpikyPow3ScalingFactor;

const vec2 offsets2D[9] =
{
	vec2(-1, 1),
	vec2(0, 1),
	vec2(1, 1),
	vec2(-1, 0),
	vec2(0, 0),
	vec2(1, 0),
	vec2(-1, -1),
	vec2(0, -1),
	vec2(1, -1),
};

// Constants used for hashing
const uint hashK1 = 15823;
const uint hashK2 = 9737333;

// Convert floating point position into an integer cell coordinate
vec2 GetCell2D(vec2 position, float radius)
{
	return floor(position / radius);
}

// Hash cell coordinate to a single unsigned integer
uint HashCell2D(vec2 cell)
{
	uint a = uint(cell.x) * hashK1;
	uint b = uint(cell.y) * hashK2;
	return (a + b);
}

uint KeyFromHash(uint hash, uint tableSize)
{
	return hash % tableSize;
}

float DensityKernel(float dst, float radius)
{
	if (dst < radius)
	{
		float v = radius - dst;
		return v * v * SpikyPow2ScalingFactor;
	}
	return 0;
}

float NearDensityKernel(float dst, float radius)
{
	if (dst < radius)
	{
		float v = radius - dst;
		return v * v * v * SpikyPow3ScalingFactor;
	}
	return 0;
}

vec2 CalculateDensity(vec2 pos)
{
	vec2 originCell = GetCell2D(pos, smoothingRadius);
	float sqrRadius = smoothingRadius * smoothingRadius;
	float density = 0;
	float nearDensity = 0;

	// Neighbour search
	for (int i = 0; i < 9; i++)
	{
		uint hash = HashCell2D(originCell + offsets2D[i]);
		uint key = KeyFromHash(hash, numParticles);
		uint currIndex = SpatialOffsets[key];

		while (currIndex < numParticles)
		{
			uvec3 indexData = SpatialIndices[currIndex].xyz;
			currIndex++;
			// Exit if no longer looking at correct bin
			if (indexData.z != key) break;
			// Skip if hash does not match
			if (indexData.y != hash) continue;

			uint neighbourIndex = indexData.x;
			vec2 neighbourPos = PredictedPositions[neighbourIndex];
			vec2 offsetToNeighbour = neighbourPos - pos;
			float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

			// Skip if not within radius
			if (sqrDstToNeighbour > sqrRadius) continue;

			// Calculate density and near density
			float dst = sqrt(sqrDstToNeighbour);
			density += DensityKernel(dst, smoothingRadius);
			nearDensity += NearDensityKernel(dst, smoothingRadius);
		}
	}

	return vec2(density, nearDensity);
}

void main() {	
	vec2 density = CalculateDensity(PredictedPositions[gl_GlobalInvocationID.x]);
	//OutDensities[gl_GlobalInvocationID.x] = uint(SpatialOffsets[gl_GlobalInvocationID.x]);
	OutDensities[gl_GlobalInvocationID.x] = density;
	//OutNearDensities[gl_GlobalInvocationID.x] = density.y;
}