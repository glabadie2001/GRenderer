#version 430 core
layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(std430, binding = 0) buffer hasher_input_layout
{
    vec2 PredictedPositions[];
};
layout(std430, binding = 1) buffer hasher_output_layout
{
	uvec4 OutSpatialIndices[];
};

uniform float smoothingRadius;
uniform uint numParticles;

const vec2 offsets2D[9] =
{
	vec2(-1, 1),
	vec2(0, 1),
	vec2(1, 1),
	vec2(-1, 0),
	vec2(0, 0),
	vec2(1, 0),
	vec2(-1, -1),
	vec2(0, -1),
	vec2(1, -1),
};

// Constants used for hashing
const uint hashK1 = 15823;   // Large prime
const uint hashK2 = 9737333;   // Large prime

// Convert floating point position into an integer cell coordinate
vec2 GetCell2D(vec2 position, float radius)
{
	return floor(position / radius);
}

// Hash cell coordinate to a single unsigned integer
uint HashCell2D(vec2 cell)
{
	uint a = uint(cell.x) * hashK1;
	uint b = uint(cell.y) * hashK2;
	return (a + b);   
}

uint KeyFromHash(uint hash, uint tableSize)
{
    return hash % tableSize;
}

void main() {
	vec2 cellCoord = GetCell2D(PredictedPositions[gl_GlobalInvocationID.x], smoothingRadius);
    uint cellHash = HashCell2D(cellCoord);
    uint cellKey = KeyFromHash(cellHash, numParticles);

	OutSpatialIndices[gl_GlobalInvocationID.x] = uvec4(gl_GlobalInvocationID.x, cellHash, cellKey, 0);
}