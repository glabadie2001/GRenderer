#version 430 core
layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(std430, binding = 0) buffer input_layout
{
    vec2 Velocities[];
    float Densities[];
    float NearDensities[];
    uint SpatialOffsets[];
    vec2 PredictedPositions[];
    uvec4 SpatialIndices[];
};
layout(std430, binding = 1) buffer output_layout
{
	vec2 OutVelocities[];
};

uniform float deltaTime;
uniform float nearPressureMultiplier;
uniform float pressureMultiplier;
uniform float targetDensity;
uniform float smoothingRadius;
uniform uint numParticles;
uniform float SpikyPow3DerivativeScalingFactor;
uniform float SpikyPow2DerivativeScalingFactor;

uint getAlignedSize(uint elementSize, uint alignment, uint count) {
    return (elementSize * count + alignment - 1u) & ~(alignment - 1u);
}

// In main:
// Velocities is first, so no offset needed
// vec2 vel = Velocities[gl_GlobalInvocationID.x];

// Densities starts after Velocities (vec2 array, 8-byte aligned)
uint velocitiesAlignedSize = getAlignedSize(8u, 4u, numParticles);
uint densitiesOffset = (velocitiesAlignedSize / 4u) - 2;  // Divide by 4 because float is 4 bytes

// NearDensities starts after Densities (float array, 4-byte aligned)
uint densitiesAlignedSize = getAlignedSize(4u, 4u, numParticles);
uint nearDensitiesOffset = (velocitiesAlignedSize + densitiesAlignedSize) / 4u - 3;

// SpatialOffsets starts after NearDensities (float array, 4-byte aligned)
uint nearDensitiesAlignedSize = getAlignedSize(4u, 8u, numParticles);
uint spatialOffsetsOffset = (velocitiesAlignedSize + densitiesAlignedSize + nearDensitiesAlignedSize) / 4u - 4;

// PredictedPositions starts after SpatialOffsets (uint array, 4-byte aligned)
uint spatialOffsetsAlignedSize = getAlignedSize(4u, 8u, numParticles);
uint predictedPositionsOffset = (velocitiesAlignedSize + densitiesAlignedSize + 
    nearDensitiesAlignedSize + spatialOffsetsAlignedSize) / 8u - 3;  // Divide by 8 for vec2

// SpatialIndices starts after PredictedPositions (vec2 array, 8-byte aligned)
uint predictedPositionsAlignedSize = getAlignedSize(8u, 16u, numParticles);
uint spatialIndicesOffset = (velocitiesAlignedSize + densitiesAlignedSize + 
    nearDensitiesAlignedSize + spatialOffsetsAlignedSize + 
    predictedPositionsAlignedSize) / 16u - 2;  // Divide by 16 for uvec4

const vec2 offsets2D[9] =
{
	vec2(-1, 1),
	vec2(0, 1),
	vec2(1, 1),
	vec2(-1, 0),
	vec2(0, 0),
	vec2(1, 0),
	vec2(-1, -1),
	vec2(0, -1),
	vec2(1, -1),
};

// Constants used for hashing
const uint hashK1 = 15823;   // Large prime
const uint hashK2 = 9737333;   // Large prime

// Convert floating point position into an integer cell coordinate
vec2 GetCell2D(vec2 position, float radius)
{
	return floor(position / radius);
}

// Hash cell coordinate to a single unsigned integer
uint HashCell2D(vec2 cell)
{
	uint a = uint(cell.x) * hashK1;
	uint b = uint(cell.y) * hashK2;
	return (a + b);
}

uint KeyFromHash(uint hash, uint tableSize)
{
    return hash % tableSize;
}

float NearDensityDerivative(float dst, float radius)
{
	if (dst <= radius)
	{
		float v = radius - dst;
		return -v * v * SpikyPow3DerivativeScalingFactor;
	}
	return 0;
}

float DensityDerivative(float dst, float radius)
{
	if (dst <= radius)
	{
		float v = radius - dst;
		return -v * SpikyPow2DerivativeScalingFactor;
	}
	return 0;
}

float PressureFromDensity(float density)
{
	return (density - targetDensity) * pressureMultiplier;
}

float NearPressureFromDensity(float nearDensity)
{
	return nearPressureMultiplier * nearDensity;
}


vec2 CalculatePressure()
{
    uint particleIndex = gl_GlobalInvocationID.x;
	if (particleIndex >= numParticles) return vec2(0,0);

	float density = Densities[densitiesOffset + particleIndex];
	float densityNear = NearDensities[nearDensitiesOffset + particleIndex];
	float pressure = PressureFromDensity(density);
	float nearPressure = NearPressureFromDensity(densityNear);
	vec2 pressureForce = vec2(0,0);
	
	vec2 pos = PredictedPositions[predictedPositionsOffset + particleIndex];
	vec2 originCell = GetCell2D(pos, smoothingRadius);
	float sqrRadius = smoothingRadius * smoothingRadius;

	// Neighbour search
	for (int i = 0; i < 9; i ++)
	{
		uint hash = HashCell2D(originCell + offsets2D[i]);
		uint key = KeyFromHash(hash, numParticles);
		uint currIndex = SpatialOffsets[spatialOffsetsOffset + key];

		while (currIndex < numParticles)
		{
			uvec3 indexData = SpatialIndices[spatialIndicesOffset + currIndex].xyz;
			currIndex ++;
			// Exit if no longer looking at correct bin
			if (indexData.z != key) break;
			// Skip if hash does not match
			if (indexData.y != hash) continue;

			uint neighborIndex = indexData.x;
			// Skip if looking at self
			if (neighborIndex == particleIndex) continue;

			vec2 neighbourPos = PredictedPositions[predictedPositionsOffset + neighborIndex];
			vec2 offsetToNeighbour = neighbourPos - pos;
			float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

			// Skip if not within radius
			if (sqrDstToNeighbour > sqrRadius) continue;

			// Calculate pressure force
			float dst = sqrt(sqrDstToNeighbour);
			vec2 dirToNeighbour = dst > 0 ? offsetToNeighbour / dst : vec2(0, 1);

			float neighbourDensity = Densities[densitiesOffset + neighborIndex];
			float neighbourNearDensity = NearDensities[nearDensitiesOffset + neighborIndex];
			float neighbourPressure = PressureFromDensity(neighbourDensity);
			float neighbourNearPressure = NearPressureFromDensity(neighbourNearDensity);

			float sharedPressure = (pressure + neighbourPressure) * 0.5;
			float sharedNearPressure = (nearPressure + neighbourNearPressure) * 0.5;

			pressureForce += dirToNeighbour * DensityDerivative(dst, smoothingRadius) * sharedPressure / (neighbourDensity);
			pressureForce += dirToNeighbour * NearDensityDerivative(dst, smoothingRadius) * sharedNearPressure / (neighbourNearDensity);
		}
	}

	return pressureForce;
}

void main() {
	vec2 pressure = CalculatePressure();
	OutVelocities[gl_GlobalInvocationID.x] = Velocities[gl_GlobalInvocationID.x] + (pressure / Densities[densitiesOffset + gl_GlobalInvocationID.x] * deltaTime);
	
	//Debug Helpers
	//OutVelocities[gl_GlobalInvocationID.x] = vec2(SpatialOffsets[spatialOffsetsOffset + gl_GlobalInvocationID.x], Densities[densitiesOffset + gl_GlobalInvocationID.x]);
	//OutVelocities[gl_GlobalInvocationID.x] = PredictedPositions[predictedPositionsOffset + gl_GlobalInvocationID.x];
	//OutVelocities[gl_GlobalInvocationID.x] = pressure;
	//OutVelocities[gl_GlobalInvocationID.x] = vec2(pressureMultiplier, nearPressureMultiplier);
}